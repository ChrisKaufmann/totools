#!/bin/bash

DOPASS=""
DOSUDO=""

usage()
{
	echo "usage: $0 [-s] [-p] <youruser@host> <newuser> <authfile>
	-s adds user to sudoers
	-p generates a password"
}

while getopts "sph?" opt; do
	case $opt in
		p)
			DOPASS=1
			;;
		s)
			DOSUDO=1
			;;
		h)
			usage
			exit
			;;
		?)
			usage
			exit
			;;
	esac
done
shift $(($OPTIND -1))

myuserhost=$1
user=$2
authfile=$3

if [ ! $authfile ]
	then
		usage
	exit
fi
if [ ! -e $authfile ]
	then
		echo "keyfile $authfile not found"
	exit
fi

mypubkey=`cat $authfile`;
authkeyfile="~$user/.ssh/authorized_keys"


mycmd="sudo useradd $user;
	sudo mkdir -p ~$user/.ssh; 
	sudo chown -R root ~$user/.ssh;
	sudo chmod 700 ~$user/.ssh;
	sudo  touch $authkeyfile; 
	sudo bash -c 'cp $authkeyfile /tmp/';
	sudo bash -c 'chmod 777 /tmp/authorized_keys';
	grep -v '$mypubkey' /tmp/authorized_keys > /tmp/authkeyfile.new; 
	sudo echo '$mypubkey' >> /tmp/authkeyfile.new;
	sudo bash -c 'mv /tmp/authkeyfile.new $authkeyfile';
	sudo bash -c 'chmod 644 $authkeyfile';
	sudo bash -c 'chown -R $user:$user ~$user/.ssh'
	"
ssh -t $myuserhost "$mycmd"
if [[ $DOSUDO =~ 1 ]]
	then 
		ssh -t $myuserhost "grep $user /etc/sudoers || { echo \"$user ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers; }"
fi
if [[ $DOPASS =~ 1 ]]
	then 
		NEWPASS=`pwgen -n 32`
		echo "Setting password to $NEWPASS"
		DOPASS="echo '$NEWPASS' | passwd $user --stdin"
		ssh -t $myuserhost "$DOPASS"
fi
